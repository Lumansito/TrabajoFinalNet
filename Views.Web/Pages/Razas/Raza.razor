@page "/raza"
@using Logic
@using Models.Entity
@inject NavigationManager Navigation
@code {
    private List<Models.Entity.Models.Raza> razas;

    protected override async Task OnInitializedAsync()
    {
        razas = await RazasLogic.GetAll();
    }

    private async Task EliminarRaza(int id)
    {
        bool resultado = await RazasLogic.Eliminar(id);
        if (resultado)
        {
            razas = await RazasLogic.GetAll();
        }
    }
}

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3 class="mb-4">Lista de Razas</h3>
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (razas != null && razas.Count > 0)
                {
                    @foreach (var raza in razas)
                    {
                        <tr>
                            <td>@raza.Nombre</td>

                            <td>
                                <button class="btn btn-primary btn-sm me-2" @onclick="@(() => Navigation.NavigateTo($"/raza/editar/{raza.RazaId}"))">Editar</button>
                                <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarRaza(raza.RazaId))">Eliminar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center"> No hay razas registradas</td>
                    </tr>
                }

            </tbody>
        </table>
        <button class="btn btn-success mt-3" @onclick="@(() => Navigation.NavigateTo("/raza/crear"))">Nueva Raza</button>

    </Authorized>
    <NotAuthorized>
        <h3 class="text-danger">No estás autorizado a ver esta página.</h3>
    </NotAuthorized>
</AuthorizeView>

