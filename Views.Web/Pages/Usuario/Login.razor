@page "/login"
@layout InvitadoLayout

@using Logic
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProv /*Para cambiar el estado de la sesión del usuario al ingresar*/

<div class="min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full bg-white p-8 rounded-lg shadow-md space-y-8">
        <!-- Header -->
        <div class="text-center">
            <h1 class="text-4xl font-extrabold text-indigo-600">Veterinaria San Antón</h1>
        </div>

        <!-- Login Form Title -->
        <div>
            <h2 class="mt-6 text-center text-2xl font-semibold text-gray-900">
                Ingrese a su cuenta
            </h2>
        </div>

        <!-- Login Form -->
        <EditForm Model="@user" OnValidSubmit="HandleLogin" class="mt-8 space-y-6">
            <DataAnnotationsValidator />
            <div class="rounded-md shadow-sm space-y-4 mb-3">
                <div class="mb-3 text-center">
                    <label for="Dni" class="sr-only">DNI</label>
                    <InputText id="Dni" class="appearance-none rounded-t-lg relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                               placeholder="Ingrese su DNI"
                               @bind-Value="user.DniString" />
                    <ValidationMessage For="@(() => user.Dni)" />
                </div>

                <div class="mb-3 text-center">
                    <label for="Contraseña" class="sr-only">Contraseña</label>
                    <InputText id="Contraseña" type="password" class="appearance-none rounded-b-lg relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                               placeholder="Ingrese su contraseña"
                               @bind-Value="user.Contraseña" />
                    <ValidationMessage For="@(() => user.Contraseña)" />
                </div>
            </div>

            <div class="flex items-center justify-between">

                <div class="text-sm text-center">
                    <a href="#" class="font-medium text-indigo-600 hover:text-indigo-500">
                        Olvidó su contraseña?
                    </a>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="d-flex justify-content-center align-items-center">
                <button type="submit" class="mt-2 mb-2 btn btn-primary btn-sm px-3">Ingresar</button>
            </div>

        </EditForm>

        <!-- Register Link -->
        <div class="text-center">
            <p class="mt-2 text-sm text-gray-600">
                ¿No tiene una cuenta aún?
                <a href="/register" class="font-medium text-indigo-600 hover:text-indigo-500">
                    Regístrese aquí
                </a>
            </p>
        </div>
    </div>
</div>


@code {
    private UsuarioLoginDTO user = new UsuarioLoginDTO();
    string token = "";

    private async Task HandleLogin()
    {
        try
        {
            var response = await Logic.UsuariosLogic.LogInWeb(user);
            if (response == null)
            {
                toastService.ShowError("Error en la respuesta del servidor.");
                return;
            }

            toastService.ShowSuccess("¡Ingreso exitoso! Bienvenido.");

            var token = await response.Content.ReadAsStringAsync();
            await GuardarSesion(token);
            NavigationManager.NavigateTo("/raza");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private async Task GuardarSesion(string token)
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);
        await ObtenerUsuario();
        await AuthStateProv.GetAuthenticationStateAsync(); //cambia el estado de la autenticación
    }
    private async Task ObtenerUsuario()
    {
        token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
        Console.WriteLine(token);
    }

    async Task logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "Token"); //Elimina el token
        await AuthStateProv.GetAuthenticationStateAsync(); //Cambia el estado de la autenticación
    }
}