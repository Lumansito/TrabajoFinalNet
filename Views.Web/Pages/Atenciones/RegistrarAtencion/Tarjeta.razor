@using Models.Entity.Models
@using Logic
@inject IJSRuntime JSRuntime


<div class="card mb-3">
    <div class="card-body">
        <h5 class="card-title">@Atencion.NombreMascota</h5>
        <p><strong>Profesional:</strong> @Atencion.NombreProfesional</p>
        <p><strong>Fecha y Hora:</strong> @Atencion.FechaHora</p>
        <p><strong>Monto a pagar:</strong> @Atencion.MontoApagar</p>

        <p><strong>Servicios:</strong> @(Atencion.Servicios.Any() ? string.Join(", ", Atencion.Servicios.Select(s => s.Nombre)) : "Ningún servicio agregado")</p>

        <div class="input-group">
            <select class="form-select" @bind="IdServicioSeleccionado">
                <option selected disabled value="">Agregar servicio</option>
                @foreach (var servicio in serviciosDisponibles)
                {
                    <option value="@servicio.ServicioId.ToString()">@servicio.Nombre</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="AddService">Agregar</button>
            <button class="btn btn-danger" @onclick="DeleteService">Eliminar</button>
        </div>

        <div class="mb-3">
            <label for="observaciones-@Atencion.AtencionId" class="form-label">Observaciones:</label>
            <textarea class="form-control observaciones-text" id="observaciones-@Atencion.AtencionId" rows="3" @bind="Atencion.Observaciones"></textarea>
            <button class="btn btn-primary" @onclick="SaveObservations">Guardar</button>
        </div>

    </div>
</div>

@code {
    [Parameter] public InfoAtencionesRealizadas Atencion { get; set; }
    [Parameter] public EventCallback<(int, Servicio)> OnAddService { get; set; }
    [Parameter] public EventCallback<(int, Servicio)> OnDeleteService { get; set; }
    [Parameter] public EventCallback<(int, string)> OnSaveObservaciones { get; set; }

    [Parameter] public int AtencionId { get; set; }

    private List<Servicio> serviciosDisponibles { get; set; } = new List<Servicio>();
    private string IdServicioSeleccionado { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await cargarServiciosParaLaAtencion();
    }

    private async Task cargarServiciosParaLaAtencion()
    {
        serviciosDisponibles = await Logic.AtencionLogic.GetServiciosPosiblesByIdAtencion(Atencion.AtencionId);
    }

    private async Task AddService()
    {
        if (int.TryParse(IdServicioSeleccionado, out int servicioId))
        {
            var servicio = serviciosDisponibles.FirstOrDefault(s => s.ServicioId == servicioId);
            if (servicio != null)
            {
                await OnAddService.InvokeAsync((Atencion.AtencionId, servicio));
            }
        }
    }

    private async Task DeleteService()
    {
        if (int.TryParse(IdServicioSeleccionado, out int servicioId))
        {
            var servicio = Atencion.Servicios.FirstOrDefault(s => s.ServicioId == servicioId);
            if (servicio != null)
            {
                await OnDeleteService.InvokeAsync((Atencion.AtencionId, servicio));
            }
        }
    }

    private async Task SaveObservations()
    {
        // Invocar el callback para pasar las observaciones al componente principal
        await OnSaveObservaciones.InvokeAsync((Atencion.AtencionId, Atencion.Observaciones));
    }

}
