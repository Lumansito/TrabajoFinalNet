@page "/RegistrarAtencion"
@using Models.Entity.Models
@using Logic
@inject IJSRuntime JSRuntime
@using System.Linq
@using Models.Entity.Data

<h1>Registrar Atenciones</h1>

<div class="container mt-4">
    @foreach (var atencion in Atenciones)
    {
        <Tarjeta Atencion="atencion"
                 OnAddService="(args) => OnAddService(args.Item1, args.Item2)"
                 OnDeleteService="(args)=> OnDeleteService(args.Item1, args.Item2)"
                 OnSaveObservaciones="(args)=> OnSaveObservations(args.Item1, args.Item2)"
                 AtencionId="atencion.AtencionId" />
    }
</div>

@code {
    private List<InfoAtencionesRealizadas> Atenciones { get; set; } = new List<InfoAtencionesRealizadas>();
    private int AtencionId { get; set; } // Se agrega esta propiedad para almacenar el AtencionId seleccionado.

    protected override async Task OnInitializedAsync()
    {
        await cargarAtenciones();
    }

    private async Task cargarAtenciones()
    {
        Atenciones = await AtencionLogic.GetAllInfoAtencionesRealizadas();
    }

    private async void OnAddService(int idAtencion, Servicio servicio)
    {
        var atencion = Atenciones.FirstOrDefault(a => a.AtencionId == idAtencion);
        if (atencion != null && !atencion.Servicios.Contains(servicio))
        {
            string accion = "Agregar";

            AtencionPatchDTO atencionPatch = new AtencionPatchDTO { ServicioId = servicio.ServicioId };
            await Logic.AtencionLogic.ActualizarAtencion(atencion.AtencionId, atencionPatch, accion);
            Console.WriteLine("Se agregó un servicio a la atencion", servicio.Nombre);
        }
    }

    private async void OnDeleteService(int idAtencion, Servicio servicio)
    {
        var atencion = Atenciones.FirstOrDefault(a => a.AtencionId == idAtencion);
        if (atencion != null && atencion.Servicios.Contains(servicio))
        {
            string accion = "Borrar";

            AtencionPatchDTO atencionPatch = new AtencionPatchDTO { ServicioId = servicio.ServicioId };
            await Logic.AtencionLogic.ActualizarAtencion(atencion.AtencionId, atencionPatch,accion);
            Console.WriteLine("Se eliminó un servicio de la atencion", servicio.Nombre);
        }
    }

    // Este método actualizará la observación de la atención seleccionada
    private async Task OnSaveObservations(int atencionId, string observaciones)
    {
        var atencion = Atenciones.FirstOrDefault(a => a.AtencionId == atencionId);
        if (atencion != null)
        {
            atencion.Observaciones = observaciones;
            // Aquí puedes actualizar la base de datos si es necesario
            await Logic.AtencionLogic.ActualizarAtencion(atencion.AtencionId, new AtencionPatchDTO { Observaciones = observaciones }, "Registrar observaciones");
        }
    }


}

